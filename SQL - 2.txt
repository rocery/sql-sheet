*SKALAR MATEMATIKA*
//ABS -> Mengembalikan nilai absolute dari sebuah row
SELECT StudentID, FirstName, LastName, Semester1, Semester2, ABS(MarkGrowth) AS MarkGrowth
FROM students;

//CEILING -> Mengembalikan pembulatan nilai ke atas
SELECT StudentID, FirstName, LastName, CEILING(Semester1) AS Semester1, CEILING(Semester2) AS Semester2, MarkGrowth
FROM students;

//FOOR -> Mengembalikan pembulatan nilai ke bawah
SELECT StudentID, FirstName, LastName, FLOOR(Semester1) AS Semester1, FLOOR(Semester2) AS Semester2, MarkGrowth
FROM students;

//ROUND -> Membulatkan angka di belakang koma
SELECT StudentID, FirstName, LastName, ROUND(Semester1,1) AS Semester1, ROUND(Semester2,0) AS Semester2, MarkGrowth
FROM students;

//SQRT -> Akar pangkat dari sebuah nilai
SELECT StudentID, FirstName, LastName, SQRT(Semester1) AS Semester1, Semester2, MarkGrowth
FROM students;

//MOD -> Sisa hasil bagi
//EXP -> Menghitung nilai exponensial
SELECT StudentID, FirstName, LastName, MOD(Semester1,2) AS Semester1, Semester2, EXP(MarkGrowth)
FROM students;

*SKALAR STRING*
//CONCAT -> Menggabungkan semua input, NULL diabaikan CONCAT('abc',2,NULL,22) = abc222
SELECT StudentID, CONCAT(FirstName, LastName) AS Name, Semester1, Semester2, MarkGrowth
FROM students;

//SUBSTRING_INDEX 
SELECT SUBSTRING_INDEX(column, delimiter, index to return) FROM TableName;
    column --> merupakan nama kolom yang akan dipecah text-nya,
    delimiter --> karakter atau gabungan beberapa karakter untuk pemecah text pada kolom bersangkutan,
    index_to_return --> indeks dari pecahan text yang akan diambil.
SELECT StudentID, SUBSTRING_INDEX(Email,'@',1) AS Name
FROM students;

//SPLIT_PART -> Membagi string berdasarkan delimiter SPLIT_PART('abc_def_ghi','_',2) = def


//SUBSTR -> Mengekstrak karakter SUBSTR('alphabet',3,2) = ph
SELECT SUBSTR(columnName, Start Index, Number of string to be extract) FROM TableName; 
    columnName --> nama kolom yang akan dicari substring-nya
    Start Index --> indeks dari text yang dimiliki (dimulai dari 1)
    Number of string to be extract --> jumlah karakter atau beberapa karakter yang akan diambil.
SELECT StudentID, SUBSTR(FirstName, 2, 3) AS Initial
FROM students;

//LENGTH -> Menghitung jumlah karakter LENGTH('jose') = 4
SELECT StudentID, FirstName, LENGTH(FirstName) AS Total_Char
FROM students;

//REPLACE -> Mengganti karakter dalam string REPLACE('abcdabcd',''cd','XX') = abXXabXX
SELECT StudentID, Email, REPLACE(Email, 'yahoo', 'gmail') AS New_Email
FROM students;

//TRIM -> Menghapus karakter dalam string 
    TRIM(BOTH 'x' FROM 'xTomxx') = Tom
    TRIM(LEADING 'x' FROM 'xTomxx') = Tomxx
    TRIM(TRAILING 'x' FROM 'xTomxx') = XTom

//UPPER -> Mengubah huruf menjadi kapital UPPER('Joni') = JONI
//LOWER -> Mengubah huruf menjadi kecil LOWER('JONI') = joni
SELECT StudentID, UPPER(FirstName) AS FirstName, LOWER(LastName) AS LastName
FROM students;

*FUNGSI AGGREGATE*
//SUM() -> Menjumlahkan sekelompok nilai(baris) dalam satu kolom
SELECT SUM(Semester1) AS Total_1, SUM(Semester2) AS Total_2
FROM students;

//COUNT() -> Menghitung jumlah baris
SELECT COUNT(FirstName) AS Total_Student
FROM students;

//AVG() -> Menghitung rata-rata dari suatu kolom
SELECT AVG(Semester1) AS AVG_1, AVG(Semester2) AS AVG_2
FROM students;

//MIN() -> Mencari nilai minimum dari suatu kolom
//MAX -> Mencari nilai maximum dari suatu kolom
SELECT MIN(Semester1) AS Min1, MAX(Semester1) AS Max1, MIN(Semester2) AS Min2, MAX(Semester2) AS Max2
FROM students;

//FIRST -> Mengembalikan nilai pada baris pertama dari suatu kolom
//LAST -> Mengembalikan nilai pada baris terakhir dari suatu kolom

*GROUP BY*
GROUP BY digunakan dengan SELECT, artinya kolom yang digunakan di GROUP BY statement, juga perlu ditempatkan di SELECT.
GROUP BY ditempatkan setelah WHERE, tetapi jika tidak menggunakan WHERE maka langsung ditempatkan setelah FROM. 
Jika menggunakan ORDER BY, maka GROUP BY ditempatkan sebelum ORDER BY. 
SELECT colum_name(s)
FROM table_name
WHERE condition(s)
GROUP BY colum_name(s)
ORDER BY colum_name(s);

//Group by Single Column
SELECT province,
COUNT(DISTINCT order_id) AS total_order,
SUM(item_price) AS total_price
FROM sales_retail_2019
GROUP BY province;

//Group by Multiple Column
SELECT province,
brand,
COUNT(DISTINCT order_id) AS total_order,
SUM(item_price) AS total_price FROM sales_retail_2019
GROUP BY province, brand;

//Fungsi Aggregate dengan Grouping
SELECT province,
COUNT(DISTINCT order_id) AS total_unique_order,
SUM(item_price) AS revenue 
FROM sales_retail_2019
GROUP BY province;

//Penggunaan CASE... WHEN...
SELECT ColumnName1, ColumnName2,  
CASE  
    WHEN condition1 THEN result1  
    WHEN condition2 THEN result2  
    WHEN conditionN THEN resultN  
    ELSE result  
END as alias  
FROM TableName;

SELECT MONTH(order_date) AS order_month, SUM(item_price) AS total_price, 
CASE  
    WHEN SUM(item_price) >= 30000000000 THEN 'Target Achieved'
    WHEN SUM(item_price) <= 25000000000 THEN 'Less Performed'
    ELSE 'Follow up'
END as remark
FROM sales_retail_2019
GROUP BY MONTH(order_date);

Total jumlah seluruh penjualan (total/revenue).
Total quantity seluruh produk yang terjual.
Total quantity dan total revenue untuk setiap kode produk.
Rata - Rata total belanja per kode pelanggan.
Selain itu,  jangan lupa untuk menambahkan kolom baru dengan nama 
‘kategori’ yang mengkategorikan total/revenue ke dalam 3 kategori: High: > 300K; Medium: 100K - 300K; Low: <100K.

-- 1. Total jumlah seluruh penjualan (total/revenue).
SELECT SUM(total) as total 
FROM tr_penjualan;
-- 2. Total quantity seluruh produk yang terjual.
SELECT SUM(qty) as qty 
FROM tr_penjualan;
-- 3. Total quantity dan total revenue untuk setiap kode produk.
SELECT kode_produk, SUM(qty) as qty, SUM(total) as total 
FROM tr_penjualan
GROUP BY kode_produk;
-- 4. Rata - Rata total belanja per kode pelanggan.
SELECT kode_pelanggan, AVG(total) as avg_total 
FROM tr_penjualan
GROUP BY kode_pelanggan;
/* 5. Selain itu,  jangan lupa untuk menambahkan kolom baru 
dengan nama ‘kategori’ yang mengkategorikan total/revenue ke dalam 
3 kategori: High: > 300K; Medium: 100K - 300K; Low: <100K. */
SELECT kode_transaksi,kode_pelanggan,no_urut,kode_produk, nama_produk, qty, total,
CASE  
    WHEN total > 300000 THEN 'High'
    WHEN total < 100000 THEN 'Low'   
    ELSE 'Medium'  
END as kategori 
FROM tr_penjualan;